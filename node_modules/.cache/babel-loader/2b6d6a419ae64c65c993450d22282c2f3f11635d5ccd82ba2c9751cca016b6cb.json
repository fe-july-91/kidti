{"ast":null,"code":"import _css from '@emotion/css';\nimport _extends from '@babel/runtime/helpers/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';\nimport { jsx } from '@emotion/core';\nimport { useRef } from 'react';\nfunction getClientPosition(e) {\n  var touches = e.touches;\n  if (touches && touches.length) {\n    var finger = touches[0];\n    return {\n      x: finger.clientX,\n      y: finger.clientY\n    };\n  }\n  return {\n    x: e.clientX,\n    y: e.clientY\n  };\n}\nvar track = {\n  position: 'relative',\n  display: 'inline-block',\n  backgroundColor: '#ddd',\n  borderRadius: 5,\n  userSelect: 'none',\n  boxSizing: 'border-box'\n};\nvar active = {\n  position: 'absolute',\n  backgroundColor: '#5e72e4',\n  borderRadius: 5,\n  userSelect: 'none',\n  boxSizing: 'border-box'\n};\nvar thumb = {\n  position: 'relative',\n  display: 'block',\n  content: '\"\"',\n  width: 18,\n  height: 18,\n  backgroundColor: '#fff',\n  borderRadius: '50%',\n  boxShadow: '0 1px 1px rgba(0,0,0,.5)',\n  userSelect: 'none',\n  cursor: 'pointer',\n  boxSizing: 'border-box'\n};\nvar styles = {\n  x: {\n    track: _extends({}, track, {\n      width: 200,\n      height: 10\n    }),\n    active: _extends({}, active, {\n      top: 0,\n      height: '100%'\n    }),\n    thumb: _extends({}, thumb)\n  },\n  y: {\n    track: _extends({}, track, {\n      width: 10,\n      height: 200\n    }),\n    active: _extends({}, active, {\n      left: 0,\n      width: '100%'\n    }),\n    thumb: _extends({}, thumb)\n  },\n  xy: {\n    track: {\n      position: 'relative',\n      overflow: 'hidden',\n      width: 200,\n      height: 200,\n      backgroundColor: '#5e72e4',\n      borderRadius: 0\n    },\n    active: {},\n    thumb: _extends({}, thumb)\n  },\n  disabled: {\n    opacity: 0.5\n  }\n};\nvar Slider = function Slider(_ref) {\n  var disabled = _ref.disabled,\n    axis = _ref.axis,\n    x = _ref.x,\n    y = _ref.y,\n    xmin = _ref.xmin,\n    xmax = _ref.xmax,\n    ymin = _ref.ymin,\n    ymax = _ref.ymax,\n    xstep = _ref.xstep,\n    ystep = _ref.ystep,\n    onChange = _ref.onChange,\n    onDragStart = _ref.onDragStart,\n    onDragEnd = _ref.onDragEnd,\n    xreverse = _ref.xreverse,\n    yreverse = _ref.yreverse,\n    customStyles = _ref.styles,\n    props = _objectWithoutPropertiesLoose(_ref, [\"disabled\", \"axis\", \"x\", \"y\", \"xmin\", \"xmax\", \"ymin\", \"ymax\", \"xstep\", \"ystep\", \"onChange\", \"onDragStart\", \"onDragEnd\", \"xreverse\", \"yreverse\", \"styles\"]);\n  var container = useRef(null);\n  var handle = useRef(null);\n  var start = useRef({});\n  var offset = useRef({});\n  function getPosition() {\n    var top = (y - ymin) / (ymax - ymin) * 100;\n    var left = (x - xmin) / (xmax - xmin) * 100;\n    if (top > 100) top = 100;\n    if (top < 0) top = 0;\n    if (axis === 'x') top = 0;\n    if (left > 100) left = 100;\n    if (left < 0) left = 0;\n    if (axis === 'y') left = 0;\n    return {\n      top: top,\n      left: left\n    };\n  }\n  function change(_ref2) {\n    var top = _ref2.top,\n      left = _ref2.left;\n    if (!onChange) return;\n    var _container$current$ge = container.current.getBoundingClientRect(),\n      width = _container$current$ge.width,\n      height = _container$current$ge.height;\n    var dx = 0;\n    var dy = 0;\n    if (left < 0) left = 0;\n    if (left > width) left = width;\n    if (top < 0) top = 0;\n    if (top > height) top = height;\n    if (axis === 'x' || axis === 'xy') {\n      dx = left / width * (xmax - xmin);\n    }\n    if (axis === 'y' || axis === 'xy') {\n      dy = top / height * (ymax - ymin);\n    }\n    var x = (dx !== 0 ? parseInt(dx / xstep, 10) * xstep : 0) + xmin;\n    var y = (dy !== 0 ? parseInt(dy / ystep, 10) * ystep : 0) + ymin;\n    onChange({\n      x: xreverse ? xmax - x + xmin : x,\n      y: yreverse ? ymax - y + ymin : y\n    });\n  }\n  function handleMouseDown(e) {\n    if (disabled) return;\n    e.preventDefault();\n    e.stopPropagation();\n    e.nativeEvent.stopImmediatePropagation();\n    var dom = handle.current;\n    var clientPos = getClientPosition(e);\n    start.current = {\n      x: dom.offsetLeft,\n      y: dom.offsetTop\n    };\n    offset.current = {\n      x: clientPos.x,\n      y: clientPos.y\n    };\n    document.addEventListener('mousemove', handleDrag);\n    document.addEventListener('mouseup', handleDragEnd);\n    document.addEventListener('touchmove', handleDrag, {\n      passive: false\n    });\n    document.addEventListener('touchend', handleDragEnd);\n    document.addEventListener('touchcancel', handleDragEnd);\n    if (onDragStart) {\n      onDragStart(e);\n    }\n  }\n  function getPos(e) {\n    var clientPos = getClientPosition(e);\n    var left = clientPos.x + start.current.x - offset.current.x;\n    var top = clientPos.y + start.current.y - offset.current.y;\n    return {\n      left: left,\n      top: top\n    };\n  }\n  function handleDrag(e) {\n    if (disabled) return;\n    e.preventDefault();\n    change(getPos(e));\n  }\n  function handleDragEnd(e) {\n    if (disabled) return;\n    e.preventDefault();\n    document.removeEventListener('mousemove', handleDrag);\n    document.removeEventListener('mouseup', handleDragEnd);\n    document.removeEventListener('touchmove', handleDrag, {\n      passive: false\n    });\n    document.removeEventListener('touchend', handleDragEnd);\n    document.removeEventListener('touchcancel', handleDragEnd);\n    if (onDragEnd) {\n      onDragEnd(e);\n    }\n  }\n  function handleTrackMouseDown(e) {\n    if (disabled) return;\n    e.preventDefault();\n    var clientPos = getClientPosition(e);\n    var rect = container.current.getBoundingClientRect();\n    start.current = {\n      x: clientPos.x - rect.left,\n      y: clientPos.y - rect.top\n    };\n    offset.current = {\n      x: clientPos.x,\n      y: clientPos.y\n    };\n    document.addEventListener('mousemove', handleDrag);\n    document.addEventListener('mouseup', handleDragEnd);\n    document.addEventListener('touchmove', handleDrag, {\n      passive: false\n    });\n    document.addEventListener('touchend', handleDragEnd);\n    document.addEventListener('touchcancel', handleDragEnd);\n    change({\n      left: clientPos.x - rect.left,\n      top: clientPos.y - rect.top\n    });\n    if (onDragStart) {\n      onDragStart(e);\n    }\n  }\n  var pos = getPosition();\n  var valueStyle = {};\n  if (axis === 'x') valueStyle.width = pos.left + '%';\n  if (axis === 'y') valueStyle.height = pos.top + '%';\n  if (xreverse) valueStyle.left = 100 - pos.left + '%';\n  if (yreverse) valueStyle.top = 100 - pos.top + '%';\n  var handleStyle = {\n    position: 'absolute',\n    transform: 'translate(-50%, -50%)',\n    left: xreverse ? 100 - pos.left + '%' : pos.left + '%',\n    top: yreverse ? 100 - pos.top + '%' : pos.top + '%'\n  };\n  if (axis === 'x') {\n    handleStyle.top = '50%';\n  } else if (axis === 'y') {\n    handleStyle.left = '50%';\n  }\n  var styles$1 = {\n    track: _extends({}, styles[axis].track, {}, customStyles.track),\n    active: _extends({}, styles[axis].active, {}, customStyles.active),\n    thumb: _extends({}, styles[axis].thumb, {}, customStyles.thumb),\n    disabled: _extends({}, styles.disabled, {}, customStyles.disabled)\n  };\n  return jsx(\"div\", _extends({}, props, {\n    ref: container,\n    css: /*#__PURE__*/_css([styles$1.track, disabled && styles$1.disabled], \";label:Slider;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"\")),\n    onTouchStart: handleTrackMouseDown,\n    onMouseDown: handleTrackMouseDown\n  }), jsx(\"div\", {\n    css: styles$1.active,\n    style: valueStyle\n  }), jsx(\"div\", {\n    ref: handle,\n    style: handleStyle,\n    onTouchStart: handleMouseDown,\n    onMouseDown: handleMouseDown,\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      e.nativeEvent.stopImmediatePropagation();\n    }\n  }, jsx(\"div\", {\n    css: styles$1.thumb\n  })));\n};\nSlider.defaultProps = {\n  disabled: false,\n  axis: 'x',\n  x: 50,\n  xmin: 0,\n  xmax: 100,\n  y: 50,\n  ymin: 0,\n  ymax: 100,\n  xstep: 1,\n  ystep: 1,\n  xreverse: false,\n  yreverse: false,\n  styles: {}\n};\nexport default Slider;","map":{"version":3,"names":["_css"],"sources":["/Users/mariashmakova/Projects/personal/kidti/node_modules/react-input-slider/dist/slider.js"],"sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { useRef } from 'react';\nimport { getClientPosition } from './utils';\nimport defaultStyles from './styles';\n\nconst Slider = ({\n  disabled,\n  axis,\n  x,\n  y,\n  xmin,\n  xmax,\n  ymin,\n  ymax,\n  xstep,\n  ystep,\n  onChange,\n  onDragStart,\n  onDragEnd,\n  xreverse,\n  yreverse,\n  styles: customStyles,\n  ...props\n}) => {\n  const container = useRef(null);\n  const handle = useRef(null);\n  const start = useRef({});\n  const offset = useRef({});\n\n  function getPosition() {\n    let top = ((y - ymin) / (ymax - ymin)) * 100;\n    let left = ((x - xmin) / (xmax - xmin)) * 100;\n\n    if (top > 100) top = 100;\n    if (top < 0) top = 0;\n    if (axis === 'x') top = 0;\n\n    if (left > 100) left = 100;\n    if (left < 0) left = 0;\n    if (axis === 'y') left = 0;\n\n    return { top, left };\n  }\n\n  function change({ top, left }) {\n    if (!onChange) return;\n\n    const { width, height } = container.current.getBoundingClientRect();\n    let dx = 0;\n    let dy = 0;\n\n    if (left < 0) left = 0;\n    if (left > width) left = width;\n    if (top < 0) top = 0;\n    if (top > height) top = height;\n\n    if (axis === 'x' || axis === 'xy') {\n      dx = (left / width) * (xmax - xmin);\n    }\n\n    if (axis === 'y' || axis === 'xy') {\n      dy = (top / height) * (ymax - ymin);\n    }\n\n    const x = (dx !== 0 ? parseInt(dx / xstep, 10) * xstep : 0) + xmin;\n    const y = (dy !== 0 ? parseInt(dy / ystep, 10) * ystep : 0) + ymin;\n\n    onChange({\n      x: xreverse ? xmax - x + xmin : x,\n      y: yreverse ? ymax - y + ymin : y\n    });\n  }\n\n  function handleMouseDown(e) {\n    if (disabled) return;\n\n    e.preventDefault();\n    e.stopPropagation();\n    e.nativeEvent.stopImmediatePropagation();\n    const dom = handle.current;\n    const clientPos = getClientPosition(e);\n\n    start.current = {\n      x: dom.offsetLeft,\n      y: dom.offsetTop\n    };\n\n    offset.current = {\n      x: clientPos.x,\n      y: clientPos.y\n    };\n\n    document.addEventListener('mousemove', handleDrag);\n    document.addEventListener('mouseup', handleDragEnd);\n    document.addEventListener('touchmove', handleDrag, { passive: false });\n    document.addEventListener('touchend', handleDragEnd);\n    document.addEventListener('touchcancel', handleDragEnd);\n\n    if (onDragStart) {\n      onDragStart(e);\n    }\n  }\n\n  function getPos(e) {\n    const clientPos = getClientPosition(e);\n    const left = clientPos.x + start.current.x - offset.current.x;\n    const top = clientPos.y + start.current.y - offset.current.y;\n\n    return { left, top };\n  }\n\n  function handleDrag(e) {\n    if (disabled) return;\n\n    e.preventDefault();\n    change(getPos(e));\n  }\n\n  function handleDragEnd(e) {\n    if (disabled) return;\n\n    e.preventDefault();\n    document.removeEventListener('mousemove', handleDrag);\n    document.removeEventListener('mouseup', handleDragEnd);\n\n    document.removeEventListener('touchmove', handleDrag, {\n      passive: false\n    });\n    document.removeEventListener('touchend', handleDragEnd);\n    document.removeEventListener('touchcancel', handleDragEnd);\n\n    if (onDragEnd) {\n      onDragEnd(e);\n    }\n  }\n\n  function handleTrackMouseDown(e) {\n    if (disabled) return;\n\n    e.preventDefault();\n    const clientPos = getClientPosition(e);\n    const rect = container.current.getBoundingClientRect();\n\n    start.current = {\n      x: clientPos.x - rect.left,\n      y: clientPos.y - rect.top\n    };\n\n    offset.current = {\n      x: clientPos.x,\n      y: clientPos.y\n    };\n\n    document.addEventListener('mousemove', handleDrag);\n    document.addEventListener('mouseup', handleDragEnd);\n    document.addEventListener('touchmove', handleDrag, { passive: false });\n    document.addEventListener('touchend', handleDragEnd);\n    document.addEventListener('touchcancel', handleDragEnd);\n\n    change({\n      left: clientPos.x - rect.left,\n      top: clientPos.y - rect.top\n    });\n\n    if (onDragStart) {\n      onDragStart(e);\n    }\n  }\n\n  const pos = getPosition();\n  const valueStyle = {};\n  if (axis === 'x') valueStyle.width = pos.left + '%';\n  if (axis === 'y') valueStyle.height = pos.top + '%';\n  if (xreverse) valueStyle.left = 100 - pos.left + '%';\n  if (yreverse) valueStyle.top = 100 - pos.top + '%';\n\n  const handleStyle = {\n    position: 'absolute',\n    transform: 'translate(-50%, -50%)',\n    left: xreverse ? 100 - pos.left + '%' : pos.left + '%',\n    top: yreverse ? 100 - pos.top + '%' : pos.top + '%'\n  };\n\n  if (axis === 'x') {\n    handleStyle.top = '50%';\n  } else if (axis === 'y') {\n    handleStyle.left = '50%';\n  }\n\n  const styles = {\n    track: { ...defaultStyles[axis].track, ...customStyles.track },\n    active: { ...defaultStyles[axis].active, ...customStyles.active },\n    thumb: { ...defaultStyles[axis].thumb, ...customStyles.thumb },\n    disabled: { ...defaultStyles.disabled, ...customStyles.disabled }\n  };\n\n  return (\n    <div\n      {...props}\n      ref={container}\n      css={[styles.track, disabled && styles.disabled]}\n      onTouchStart={handleTrackMouseDown}\n      onMouseDown={handleTrackMouseDown}\n    >\n      <div css={styles.active} style={valueStyle} />\n      <div\n        ref={handle}\n        style={handleStyle}\n        onTouchStart={handleMouseDown}\n        onMouseDown={handleMouseDown}\n        onClick={function(e) {\n          e.stopPropagation();\n          e.nativeEvent.stopImmediatePropagation();\n        }}\n      >\n        <div css={styles.thumb} />\n      </div>\n    </div>\n  );\n};\n\nSlider.defaultProps = {\n  disabled: false,\n  axis: 'x',\n  x: 50,\n  xmin: 0,\n  xmax: 100,\n  y: 50,\n  ymin: 0,\n  ymax: 100,\n  xstep: 1,\n  ystep: 1,\n  xreverse: false,\n  yreverse: false,\n  styles: {}\n};\n\nexport default Slider;\n"],"mappings":"AAyMM,OAAAA,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}