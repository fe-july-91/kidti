import './SignUpForm.scss'
import { useState } from 'react';
import { client } from '../../Utils/httpClient';
import cn from 'classnames';
import { useNavigate } from 'react-router-dom';


export const SignUpForm = () => {
    const navigate = useNavigate();
  const [errowMessage, setErrowmessage] = useState('');
  const [email, setEmail] = useState('');
  const [name, setName] = useState('');
  const [password1, setPassword1] = useState('');
  const [password2, setPassword2] = useState('');
  const [isRegistered, setIsRegistered] = useState(false);
  const [errors, setErrors] = useState({
    name: false,
    email: false,
    password1: false,
    password2: false,
  });

  const validateFields = () => {
    const newErrors = {
      name: name.trim() === '',
      email: email.trim() === '' || !/^\S+@\S+\.\S+$/.test(email),
      password1: password1.trim() === '',
      password2: password2.trim() !== password1.trim(),
    };
    setErrors(newErrors);

    return Object.values(newErrors).every((error) => !error);
  };

  const isFormValid =
  name.trim() !== '' &&
  email.trim() !== '' &&
  /^\S+@\S+\.\S+$/.test(email) &&
  password1.trim() !== '' &&
  password2.trim() === password1.trim();

  const handleSubmit = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
    event.preventDefault();
    setErrowmessage('');

    if (!validateFields()) {
      setErrowmessage('–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.');
      return;
    }

    client.post('auth/registration', {
      "email": email.trim(),
      "password": password1.trim(),
      "repeatPassword": password2.trim(),
      "name": name.trim()
    })
      .then((response: any) => {
        if (response.status === 500 ) {
          throw new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –¥–∞–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π');
        }

        if (response.status === 'BAD_REQUEST') {
          throw new Error('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö');
        }

        setIsRegistered(true);
      })
      .catch(error => setErrowmessage(error.message))
  };

  return (
    <>
      {!isRegistered
      ?  (
      <form className="form">
        <div className="form__title">
          –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Kidti
        </div>
        <div className="form__input">
          <label htmlFor="name" className="form__label">–Ü–º'—è</label>
          <input
            type="text"
            value={name}
            className={cn("form__control", {"form__control--invalid": errors.name})}
            id="name"
            onChange={(event) => setName(event.target.value)}
            onBlur={() => setErrors((prev) => ({ ...prev, name: name.trim() === '' }))}
            />
        </div>
        <div className="form__input">
          <label htmlFor="exampleInputEmail1" className="form__label">–ê–¥—Ä–µ—Å–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏</label>
          <input
            type="email"
            value={email}
            className={cn("form__control", {"form__control--invalid": errors.email})}
            id="exampleInputEmail1"
            aria-describedby="emailHelp"
            onChange={(event) => setEmail(event.target.value)}
            onBlur={() =>
              setErrors((prev) => ({
                ...prev,
                email: email.trim() === '' || !/^\S+@\S+\.\S+$/.test(email),
              }))
            }
          />
        </div>
        <div className="form__input">
          <label htmlFor="exampleInputPassword1" className="form__label">–ü–∞—Ä–æ–ª—å</label>
          <input
            type="password"
            value={password1}
            className={cn("form__control", {"form__control--invalid": errors.password1})}
            id="exampleInputPassword1"
            onChange={(event) => setPassword1(event.target.value)}
            onBlur={() => setErrors((prev) => ({ ...prev, password1: password1.trim() === '' }))}
            />
        </div>
        <div className="form__input">
          <label htmlFor="exampleInputPassword2" className="form__label">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–∞—Ä–æ–ª—å</label>
          <input
            type="password"
            value={password2}
            className={cn("form__control", {"form__control--invalid": errors.password2})}
            id="exampleInputPassword2"
            onChange={(event) => setPassword2(event.target.value)}
            onBlur={() => setErrors((prev) => ({ ...prev, password2: password2.trim() === '' }))}
            />
        </div>

          {errowMessage && <div className="form__error">{errowMessage}</div>}
          <div className="form__options"></div>
        <button
          type="submit"
          className="form__button"
          onClick={e => handleSubmit(e)}
          disabled={!isFormValid}

        >
          –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è
        </button>

        <hr className="form__divider" />

        <button type="button" className="form__button-social">
          <i className="icons icons--facebook"></i> –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –∑ Facebook
        </button>

        <button type="button" className="form__button-social">
          <i className="icons icons--google"></i> –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –∑ Google
        </button>
      </form>
        ) : (
          <div className="notification">
            <div className="notification__header"> –ú—è—É üéâ ! <br /> –õ–∏—Å—Ç-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É!
            </div>
            <p className="notification__text">–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞–π—Ç–∏ –Ω–∞ —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É,
              –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ª–∏—Å—Ç —ñ –ø–µ—Ä–µ–π—Ç–∏ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º. 
            </p>
            <button
              className="homePage__button homePage__button--logIn"
              onClick={() => navigate('/login')}
            >
              –£–≤—ñ–π—Ç–∏
            </button>
          </div>
        )
      }
     </>
  )
}